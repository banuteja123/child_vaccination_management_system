from datetime import datetime

class VaccinationSystem:
    def __init__(self):
        self.records = {}
        self.appointments = {}

    def provide_information(self):
        print("\nVaccination Information:")
        print("1. Vaccinations protect against serious diseases.")
        print("2. Vaccinations are important for children as their immune systems are still developing.")
        print("3. Regular vaccinations help prevent the spread of infectious diseases.\n")

    def store_record(self, child_name, vaccine_name, date):
        if child_name not in self.records:
            self.records[child_name] = []
        self.records[child_name].append({"vaccine": vaccine_name, "date": date})
        print(f"\nRecord stored for {child_name}: {vaccine_name} on {date}")

    def schedule_appointment(self, child_name, vaccine_name, date):
        if child_name not in self.appointments:
            self.appointments[child_name] = []
        self.appointments[child_name].append({"vaccine": vaccine_name, "date": date})
        print(f"\nAppointment scheduled for {child_name}: {vaccine_name} on {date}")

    def view_records(self, child_name):
        if child_name in self.records:
            print(f"\nVaccination records for {child_name}:")
            for record in self.records[child_name]:
                print(f" - {record['vaccine']} on {record['date']}")
        else:
            print(f"\nNo records found for {child_name}.")

    def view_reminders(self, child_name):
        today = datetime.today().date()
        if child_name in self.appointments:
            print(f"\nUpcoming appointments for {child_name}:")
            for appointment in self.appointments[child_name]:
                appointment_date = datetime.strptime(appointment['date'], '%Y-%m-%d').date()
                if appointment_date >= today:
                    print(f" - {appointment['vaccine']} on {appointment_date}")
        else:
            print(f"\nNo upcoming appointments for {child_name}.")

def main():
    system = VaccinationSystem()
    
    menu_options = {
        '1': system.provide_information,
        '2': lambda: system.store_record(
            input("\nEnter child's name: "),
            input("Enter vaccine name: "),
            input("Enter vaccination date (YYYY-MM-DD): ")
        ),
        '3': lambda: system.schedule_appointment(
            input("\nEnter child's name: "),
            input("Enter vaccine name: "),
            input("Enter appointment date (YYYY-MM-DD): ")
        ),
        '4': lambda: system.view_records(
            input("\nEnter child's name: ")
        ),
        '5': lambda: system.view_reminders(
            input("\nEnter child's name: ")
        ),
        '6': lambda: exit("\nExiting the system. Goodbye!")
    }

    while True:
        print("\n1. Provide Vaccination Information")
        print("2. Store Vaccination Record")
        print("3. Schedule Vaccination Appointment")
        print("4. View Vaccination Records")
        print("5. View Appointment Reminders")
        print("6. Exit")
        
        choice = input("\nEnter your choice: ")
        
        action = menu_options.get(choice)
        if action:
            action()
        else:
            print("\nInvalid choice. Please try again.")

if __name__ == "__main__":
    main()
